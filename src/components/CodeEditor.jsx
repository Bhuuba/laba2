import React, { useState, useEffect } from "react";
import Editor from "@monaco-editor/react";
import { Button } from "./Button";
import TaskScore from "./TaskScore";
import { evaluateTask } from "../services/openaiService";
import { getCurrentUser, updateUserStats } from "../services/firebaseService";

export const CodeEditor = ({
  language,
  value,
  onChange,
  task,
  onTaskCompleted,
}) => {
  const [output, setOutput] = useState("");
  const [loading, setLoading] = useState(false);
  const [score, setScore] = useState(null);
  const [feedback, setFeedback] = useState("");
  const [evaluating, setEvaluating] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [startTime] = useState(new Date());

  const getMonacoLanguage = () => {
    switch (language.toLowerCase()) {
      case "javascript":
        return "javascript";
      case "python":
        return "python";
      case "c++":
        return "cpp";
      default:
        return "javascript";
    }
  };

  const executePython = async (code) => {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content:
                  "You are a Python interpreter. Execute the code and return ONLY the output that would appear in the console. No explanations, no code, just the output as plain text. Handle print statements and errors naturally.",
              },
              {
                role: "user",
                content: code,
              },
            ],
            temperature: 0,
          }),
        }
      );

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Python –∫–æ–¥—É: " + error.message;
    }
  };

  const executeCpp = async (code) => {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content:
                  "You are a C++ interpreter. Execute the code and return ONLY the output that would appear in the console. No explanations, no code, just the output as plain text. Handle cout/printf and errors naturally.",
              },
              {
                role: "user",
                content: code,
              },
            ],
            temperature: 0,
          }),
        }
      );

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è C++ –∫–æ–¥—É: " + error.message;
    }
  };

  const handleRunCode = async () => {
    setLoading(true);
    setOutput("");

    try {
      let result;

      switch (language.toLowerCase()) {
        case "python":
          result = await executePython(value);
          setOutput(result);
          break;

        case "c++":
          result = await executeCpp(value);
          setOutput(result);
          break;

        case "javascript":
        default:
          // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è JavaScript
          const sandbox = {
            console: {
              log: (...args) => {
                setOutput((prev) => prev + args.join(" ") + "\n");
              },
            },
          };

          // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –∫–æ–¥
          const fn = new Function("console", value);
          fn.call(sandbox, sandbox.console);
          break;
      }
    } catch (error) {
      setOutput((prev) => prev + "–ü–æ–º–∏–ª–∫–∞: " + error.message + "\n");
    } finally {
      setLoading(false);
    }
  };

  const clearConsole = () => {
    setOutput("");
  };

  const handleSubmitSolution = async () => {
    setEvaluating(true);
    setSaveSuccess(false);
    try {
      const result = await evaluateTask(task, value);
      setScore(result.score);
      setFeedback(result.feedback);

      const timeSpentMinutes = Math.round((new Date() - startTime) / 60000);

      if (result.score >= 70) {
        const currentUser = getCurrentUser();
        if (currentUser) {
          const solutionData = {
            task,
            score: result.score,
            solution: value,
            date: new Date().toISOString(),
            language,
            timeSpent: timeSpentMinutes,
          };

          await updateUserStats(currentUser.uid, solutionData);
          setSaveSuccess(true);
          setOutput(
            (prev) =>
              `${prev}\n\n‚ú® –í—ñ—Ç–∞—î–º–æ! –í–∞—à–µ —Ä—ñ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é!\n` +
              `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}%\n` +
              `‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${timeSpentMinutes} —Ö–≤–∏–ª–∏–Ω\n` +
              `üèÜ –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!`
          );
        }
      } else {
        setOutput(
          (prev) =>
            `${prev}\n\n‚ö†Ô∏è –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 70%\n` +
            `üìä –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}%\n` +
            `‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${timeSpentMinutes} —Ö–≤–∏–ª–∏–Ω\n` +
            `üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è!`
        );
      }

      if (onTaskCompleted) {
        onTaskCompleted({ ...result, timeSpent: timeSpentMinutes });
      }
    } catch (error) {
      setOutput("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä—ñ—à–µ–Ω–Ω—è: " + error.message);
    } finally {
      setEvaluating(false);
    }
  };

  return (
    <div className="w-full">
      <div className="flex gap-2 mb-4">
        <Button onClick={clearConsole} variant="secondary" disabled={loading}>
          –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Å–æ–ª—å
        </Button>
        <Button onClick={handleRunCode} disabled={loading} variant="primary">
          {loading ? "–í–∏–∫–æ–Ω–∞–Ω–Ω—è..." : "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–¥"}
        </Button>
        <Button
          onClick={handleSubmitSolution}
          disabled={evaluating}
          variant="secondary"
        >
          {evaluating ? "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞..." : "–ó–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É"}
        </Button>
      </div>

      <div className="h-[400px] border border-gray-700 rounded-lg overflow-hidden mb-4">
        <Editor
          height="100%"
          defaultLanguage={getMonacoLanguage()}
          language={getMonacoLanguage()}
          theme="vs-dark"
          value={value}
          onChange={onChange}
          options={{
            minimap: { enabled: false },
            fontSize: 14,
            lineNumbers: "on",
            roundedSelection: false,
            scrollBeyondLastLine: false,
            readOnly: false,
            automaticLayout: true,
          }}
        />
      </div>

      {output && (
        <div className="bg-gray-800 p-4 rounded-lg">
          <h3 className="text-white mb-2">–í—ã–≤–æ–¥:</h3>
          <pre className="text-gray-300 whitespace-pre-wrap">{output}</pre>
        </div>
      )}

      {score !== null && (
        <div className="space-y-4">
          <TaskScore score={score} feedback={feedback} />
          {score >= 70 && saveSuccess && (
            <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
              –ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é! üéâ
            </div>
          )}
        </div>
      )}
    </div>
  );
};
