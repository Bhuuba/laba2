import React, { useState, useEffect } from "react";
import Editor from "@monaco-editor/react";
import { Button } from "./Button";
import TaskScore from "./TaskScore";
import { evaluateTask } from "../services/openaiService";
import { getCurrentUser, updateUserStats } from "../services/firebaseService";

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
const SUSPICIOUS_PATTERNS = [
  /–∑–∞—Ä–∞—Ö—É–π/i,
  /–±—É–¥—å –ª–∞—Å–∫–∞/i,
  /–ø–æ—Å—Ç–∞–≤—å/i,
  /–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å/i,
  /–ø—Ä–∞–≤–∏–ª—å–Ω[–∞–µ–∏—ñ] –≤—ñ–¥–ø–æ–≤—ñ–¥[—å—ñ]/i,
  /—Ä–æ–∑–≤—è–∂–∏/i,
  /–≤–∏—Ä—ñ—à–∏/i,
  /–¥–æ–ø–æ–º–æ–∂–∏/i,
  /chat/i,
  /gpt/i,
  /openai/i,
  /api[._-]?key/i,
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞
const checkCodeSecurity = (code) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  const containsSuspiciousPatterns = SUSPICIOUS_PATTERNS.some((pattern) =>
    pattern.test(code.toLowerCase())
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  const containsHttpRequests = /fetch|xhr|axios|http|api\.openai\.com/.test(
    code
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ eval –∏ –ø–æ–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const containsUnsafeFunctions =
    /eval|Function|require|import|process\.env/.test(code);

  if (containsSuspiciousPatterns) {
    throw new Error(
      "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ —Å–ø—Ä–æ–±—É –æ–±–º–∞–Ω—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–∏—à—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –∫–æ–¥ –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ."
    );
  }

  if (containsHttpRequests) {
    throw new Error(
      "‚ö†Ô∏è –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ API —Ç–∞ HTTP –∑–∞–ø–∏—Ç–∏."
    );
  }

  if (containsUnsafeFunctions) {
    throw new Error(
      "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–¥."
    );
  }

  return true;
};

const languageThemes = {
  javascript: {
    editor: {
      background: "rgba(255, 206, 0, 0.05)",
      borderColor: "rgba(255, 206, 0, 0.2)",
    },
    console: "bg-yellow-900/30",
    button: "bg-yellow-500 hover:bg-yellow-600",
  },
  python: {
    editor: {
      background: "rgba(59, 130, 246, 0.05)",
      borderColor: "rgba(59, 130, 246, 0.2)",
    },
    console: "bg-blue-900/30",
    button: "bg-blue-500 hover:bg-blue-600",
  },
  "c++": {
    editor: {
      background: "rgba(168, 85, 247, 0.05)",
      borderColor: "rgba(168, 85, 247, 0.2)",
    },
    console: "bg-purple-900/30",
    button: "bg-purple-500 hover:bg-purple-600",
  },
};

export const CodeEditor = ({
  language,
  value,
  onChange,
  task,
  onTaskCompleted,
  difficulty,
}) => {
  const [output, setOutput] = useState("");
  const [loading, setLoading] = useState(false);
  const [score, setScore] = useState(null);
  const [feedback, setFeedback] = useState("");
  const [evaluating, setEvaluating] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [startTime] = useState(new Date());

  const currentTheme =
    languageThemes[language.toLowerCase()] || languageThemes.javascript;

  const getMonacoLanguage = () => {
    switch (language.toLowerCase()) {
      case "javascript":
        return "javascript";
      case "python":
        return "python";
      case "c++":
        return "cpp";
      default:
        return "javascript";
    }
  };

  const getLanguageTemplate = () => {
    switch (language.toLowerCase()) {
      case "python":
        return "def solution(input):\n    # –í–∞—à –∫–æ–¥ —Ç—É—Ç\n    pass";
      case "c++":
        return "#include <iostream>\n#include <vector>\n\nauto solution(auto input) {\n    // –í–∞—à –∫–æ–¥ —Ç—É—Ç\n    return 0;\n}";
      default:
        return "function solution(input) {\n    // –í–∞—à –∫–æ–¥ —Ç—É—Ç\n    return null;\n}";
    }
  };

  const executePython = async (code) => {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content:
                  "You are a Python interpreter. Execute the code and return ONLY the output that would appear in the console. No explanations, no code, just the output as plain text. Handle print statements and errors naturally.",
              },
              {
                role: "user",
                content: code,
              },
            ],
            temperature: 0,
          }),
        }
      );

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Python –∫–æ–¥—É: " + error.message;
    }
  };

  const executeCpp = async (code) => {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content:
                  "You are a C++ interpreter. Execute the code and return ONLY the output that would appear in the console. No explanations, no code, just the output as plain text. Handle cout/printf and errors naturally.",
              },
              {
                role: "user",
                content: code,
              },
            ],
            temperature: 0,
          }),
        }
      );

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è C++ –∫–æ–¥—É: " + error.message;
    }
  };

  const handleRunCode = async () => {
    setLoading(true);
    setOutput("");
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
      checkCodeSecurity(value);

      let result;

      switch (language.toLowerCase()) {
        case "python":
          result = await executePython(value);
          setOutput((prev) => prev + result);
          break;

        case "c++":
          result = await executeCpp(value);
          setOutput((prev) => prev + result);
          break;

        case "javascript":
        default:
          const sandbox = {
            console: {
              log: (...args) => {
                setOutput((prev) => prev + args.join(" ") + "\n");
              },
            },
          };

          const fn = new Function("console", value);
          fn.call(sandbox, sandbox.console);
          break;
      }
    } catch (error) {
      setOutput(error.message + "\n");
    } finally {
      setLoading(false);
    }
  };

  const clearConsole = () => {
    setOutput("");
  };

  const handleSubmitSolution = async () => {
    setEvaluating(true);
    setSaveSuccess(false);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      checkCodeSecurity(value);

      const result = await evaluateTask(task, value);
      setScore(result.score);
      setFeedback(result.feedback);

      const timeSpentMinutes = Math.round((new Date() - startTime) / 60000);

      const passingScore = difficulty?.toLowerCase() === "hard" ? 65 : 70;

      if (result.score >= passingScore) {
        const currentUser = getCurrentUser();
        if (currentUser) {
          const solutionData = {
            task,
            score: result.score,
            solution: value,
            date: new Date().toISOString(),
            language,
            timeSpent: timeSpentMinutes,
            difficulty: difficulty || "medium",
          };

          await updateUserStats(currentUser.uid, solutionData);
          setSaveSuccess(true);
          setOutput(
            `‚ú® –í—ñ—Ç–∞—î–º–æ! –í–∞—à–µ —Ä—ñ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é!\n` +
              `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}%\n` +
              `‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${timeSpentMinutes} —Ö–≤–∏–ª–∏–Ω\n` +
              `üåü –ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: ${language}\n` +
              `üèÜ –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! ${
                difficulty?.toLowerCase() === "hard"
                  ? "–°–∫–ª–∞–¥–Ω–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏—Ä—ñ—à–µ–Ω–∞!"
                  : "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
              }`
          );
        }
      } else {
        setOutput(
          `‚ö†Ô∏è –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º ${passingScore}%\n` +
            `üìä –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}%\n` +
            `‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${timeSpentMinutes} —Ö–≤–∏–ª–∏–Ω\n` +
            `üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è!`
        );
      }

      if (onTaskCompleted) {
        onTaskCompleted({
          ...result,
          timeSpent: timeSpentMinutes,
          difficulty: difficulty || "medium",
        });
      }
    } catch (error) {
      setOutput(error.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä—ñ—à–µ–Ω–Ω—è");
    } finally {
      setEvaluating(false);
    }
  };

  useEffect(() => {
    if (!value && language) {
      onChange(getLanguageTemplate());
    }
  }, [language]);

  return (
    <div className="w-full">
      <div className="flex gap-2 mb-4">
        <Button
          onClick={clearConsole}
          variant="secondary"
          disabled={loading}
          className={currentTheme.button}
        >
          –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Å–æ–ª—å
        </Button>
        <Button
          onClick={handleRunCode}
          disabled={loading}
          variant="primary"
          className={currentTheme.button}
        >
          {loading ? "–í–∏–∫–æ–Ω–∞–Ω–Ω—è..." : "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–¥"}
        </Button>
        <Button
          onClick={handleSubmitSolution}
          disabled={evaluating}
          variant="secondary"
          className={currentTheme.button}
        >
          {evaluating ? "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞..." : "–ó–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É"}
        </Button>
      </div>
      <div
        className={`h-[400px] rounded-lg overflow-hidden mb-4 transition-colors duration-300`}
        style={{
          border: `1px solid ${currentTheme.editor.borderColor}`,
          background: currentTheme.editor.background,
        }}
      >
        <Editor
          height="100%"
          defaultLanguage={getMonacoLanguage()}
          language={getMonacoLanguage()}
          theme="vs-dark"
          value={value}
          onChange={onChange}
          options={{
            minimap: { enabled: false },
            fontSize: 14,
            lineNumbers: "on",
            roundedSelection: false,
            scrollBeyondLastLine: false,
            readOnly: false,
            automaticLayout: true,
          }}
        />
      </div>
      {score !== null && (
        <TaskScore score={score} feedback={feedback} difficulty={difficulty} />
      )}
      {output && (
        <div className={`p-4 rounded-lg mt-4 ${currentTheme.console}`}>
          <pre className="text-gray-300 whitespace-pre-wrap">{output}</pre>
        </div>
      )}
    </div>
  );
};
